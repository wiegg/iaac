name: 'Hetzner Deployment'

on:
  push:
    branches:
    - main
  pull_request:
  workflow_dispatch:

jobs:
  preview:
    name: 'Preview changes'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=statestoragegh" -backend-config="container_name=tfwiegg" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY }}"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      run: terraform plan -no-color -out iaac.tfplan
      env:
        TF_VAR_token: ${{ secrets.API_KEY_READ }}

    # add plan to pull request
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `
          **@${{ github.actor }} suggests the following changes in this ${{ github.event_name }}:**  

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          `;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Checks if plan was successful
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # upload plan as artifact for review
    - uses: actions/upload-artifact@v2
      with:
        name: plan
        path: iaac.tfplan

  deploy:
    name: 'Deploy changes'
    runs-on: ubuntu-latest
    needs: preview
    environment: Hetzner
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=statestoragegh" -backend-config="container_name=tfwiegg" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY }}"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out iaac.tfplan
      env:
        TF_VAR_token: ${{ secrets.API_KEY }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve iaac.tfplan

  configure:
    name: 'Configure Machines'
    runs-on: ubuntu-latest
    #needs: deploy
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=statestoragegh" -backend-config="container_name=tfwiegg" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY }}"

    # - name: Install ansible
    #   run: |
    #     sudo apt update
    #     sudo apt install ansible -y
    #     ansible --version

    - name: Create ssh key
      run: echo "$SSH_KEY" > ssh.key
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}

    - id: state
      run: echo "::set-output name=state::$(terraform state pull)"

    - name: Build Inventory From TF State
      run: |
        echo "${{ steps.state.outputs.state }}"
        ${{ steps.state.outputs.state }} > state.json
        npm i yaml
        node inventory.js

    - name: Run Playbook
      run: ansible-playbook --inventory-file=inventory.yml --private-key=ssh.key playbook.yml